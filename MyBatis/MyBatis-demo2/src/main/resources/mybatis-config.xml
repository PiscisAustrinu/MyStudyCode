<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE configuration
        PUBLIC "-//mybatis.org//DTD Config 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-config.dtd">
<configuration>
    <!--    引入properties文件，此时可以使用${属性名}的方式访问属性值-->
    <properties resource="jdbc.properties"/>
    <typeAliases>
        <!--
            typeAlias:设置某个具体类型的别名
            属性：
            type：需要设置别名的全类名
            alias：设置此类型的别名，若不设置此属性，该类型拥有具体的别名，即类名，不区分大小写
            若设置此属性，此时该类型的别名只能使用alias所设置的值
        -->
        <!--        <typeAlias type="com.Ylb.User"/>-->
        <!--        以包为单位，设置该包下多有的类型都拥有默认的别名，即类名不区分大小写-->
        <package name="com.Ylb.MyBatis.pojo"/>
    </typeAliases>
    <!--    配置连接数据库的环境
            environments:设置多个数据库的环境
            属性：
            default：设置默认使用的环境的id
    -->
    <environments default="development">

        <environment id="development">
            <!--
                transactionManager：设置事务管理方式
                属性：
                    type:设置事务管理方式，type=“JDBC|MANAGED"
                    type="JDBC":设置当前环境的事务管理都必须手动处理
                    type="MANAGED"：设置事务被管理，如spring中的AOP
            -->
            <transactionManager type="JDBC"/>
            <!--
                DataSource：设置数据源
                属性：
                    type：设置数据源的类型，type="POOLED|UNPOOLED|JNDI
                    type="POOLED":使用数据库连接池，即会将创建的连接进行缓存，下次使用可以从缓存中直接获取，不需要重新创建
                    type="UNPOOLED":不适用数据库连接池，即每次使用连接都需要重新创建
                    type="JNDI":调用上下文中的数据源
            -->
            <dataSource type="POOLED">
                <property name="driver" value="${jdbc.driver}"/>
                <property name="url" value="${jdbc.url}"/>
                <property name="username" value="${jdbc.username}"/>
                <property name="password" value="${jdbc.password}"/>
            </dataSource>
        </environment>
    </environments>
    <!--    引入映射文件-->
    <mappers>
        <package name="com.Ylb.MyBatis.mapper"/>
        <!--
            以包为单位，将包下所有的映射文件引入核心配置文件
            注意：此方式必须保证mapper接口和mapper映射文件必须在相同的包下
        -->
    </mappers>
</configuration>